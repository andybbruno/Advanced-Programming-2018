
import java.beans.PropertyChangeEvent;
import java.beans.PropertyVetoException;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeSupport;

/**
 *
 * This class create a dashboard where the all the information given from the
 * sensor are shown. It implements {@code VetoableChangeListener} interface in
 * order to be update if any of the bounded properties update.
 *
 * IMPORTANT MESSAGE: I've added a char '3' both on class names and package
 * names in order to distinguish exercise 1 to exercise 3.
 *
 * @author Andrea Bruno 585457
 */
public class DashboardFrame3 extends javax.swing.JFrame implements VetoableChangeListener {

    private boolean first_click = true;
    private boolean on;
    
    /**
     * {@code changes} manage a list of listeners and dispatches
     * {@link PropertyChangeEvent} to them.
     */
    private final VetoableChangeSupport changes = new VetoableChangeSupport(this);

    /**
     *
     *
     *
     * START OF AUTOGENERATED CODE
     *
     *
     *
     */
    /**
     * Initialize all components
     */
    public DashboardFrame3() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cntrl = new controller3.Controller3();
        msens = new moisturesensor3.MoistureSensor3();
        cuurentHumidityLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        decreasingLabel = new javax.swing.JLabel();
        decreasingLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cuurentHumidityLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        cuurentHumidityLabel.setText("Current Humidity");
        cuurentHumidityLabel.setToolTipText("");

        jButton1.setText("Read Sensor");
        jButton1.setMaximumSize(new java.awt.Dimension(150, 29));
        jButton1.setMinimumSize(new java.awt.Dimension(150, 29));
        jButton1.setPreferredSize(new java.awt.Dimension(150, 29));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        decreasingLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        decreasingLabel.setText("Decreasing");
        decreasingLabel.setToolTipText("");

        decreasingLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        decreasingLabel1.setText("Irrigation");
        decreasingLabel1.setToolTipText("");

        jButton2.setText("Manual Irrigation");
        jButton2.setMaximumSize(new java.awt.Dimension(150, 29));
        jButton2.setMinimumSize(new java.awt.Dimension(150, 29));
        jButton2.setPreferredSize(new java.awt.Dimension(150, 29));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(decreasingLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(cuurentHumidityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(decreasingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cuurentHumidityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(decreasingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(decreasingLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private controller3.Controller3 cntrl;
    private javax.swing.JLabel cuurentHumidityLabel;
    private javax.swing.JLabel decreasingLabel;
    private javax.swing.JLabel decreasingLabel1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private moisturesensor3.MoistureSensor3 msens;
    // End of variables declaration//GEN-END:variables

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DashboardFrame3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DashboardFrame3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DashboardFrame3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DashboardFrame3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DashboardFrame3().setVisible(true);
            }
        });
    }

    /**
     *
     *
     *
     * END OF AUTOGENERATED CODE
     *
     *
     *
     */

    
    
    /**
     * If the button is pressed, then launch {@code setup()}
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        //This control has been developed because in the specifications there's no reference to a stop function.
        //This means that you can only activate the sensor.
        if (first_click) {
            setup();
            first_click = false;
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    
    /**
     * When the button is pressed it starts the irrigation
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            changes.fireVetoableChange("manual", this.on, !this.on);
        } catch (PropertyVetoException ex) {
            System.err.println(ex.getMessage());
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * This method links the MoistureSensor3 to the Controller3 and the
     * DashboardFrame3 to the Controller3. In this way, there's no communication
     * between MoistureSensor3 and DashboardFrame3. This means that the MVC
     * pattern has been respected.
     */
    private void setup() {
        //bound MoistureSensor3 to Controller3
        msens.addVetoableChangeListener(cntrl);

        //bound DashboardFrame3 to Controller3
        cntrl.addVetoableChangeListener(this);
        
        //bound DashboardFrame3 to Controller3 in order to keep track of the events generated by the manual irrigation
        this.addVetoableChangeListener(cntrl);

        //loading message
        jLabel1.setText("...loading");
        jLabel2.setText("...loading");
        jLabel3.setText("...loading");
    }

    
    /**
     * Add a {@code VetoableChangeListener} to the listener list.
     *
     * @param listener The {@code VetoableChangeListener} to be added
     */
    public void addVetoableChangeListener(VetoableChangeListener listener) {
        changes.addVetoableChangeListener(listener);
    }

    /**
     * Remove a {@code VetoableChangeListener} from the listener list.
     *
     * @param listener The {@code VetoableChangeListener} to be removed
     */
    public void removeVetoableChangeListener(VetoableChangeListener listener) {
        changes.removeVetoableChangeListener(listener);
    }
    
    
    /**
     * This method gets called when a bound property is changed.In details, it
     * updates all the text labels within the dashboard with the parameters
     * given from the event.
     *
     * @param event this object describe the event source and the property that
     * has changed.
     * @throws PropertyVetoException is thrown when a proposed change to a
     * property represents an unacceptable value.
     */
    @Override
    public void vetoableChange(PropertyChangeEvent event) throws PropertyVetoException {

        if (event.getPropertyName().equals("locHumidity")) {
            jLabel1.setText(event.getNewValue().toString());
        }

        if (event.getPropertyName().equals("decreased")) {
            jLabel2.setText(event.getNewValue().toString());
        }

        if (event.getPropertyName().equals("on")) {
            this.on = (boolean) event.getNewValue();
            jLabel3.setText(this.on+"");
        }
    }
}
