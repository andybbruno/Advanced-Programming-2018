package manualdashboardframe;

import controllerveto.ControllerVeto;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyVetoException;
import moisturesensor.MoistureSensor;

public class ManualDashboardFrame extends javax.swing.JFrame {

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Label decreasingLBL;
    private java.awt.Label humidityLBL;
    private java.awt.Button manualIrrigation;
    private moisturesensor.MoistureSensor moistureSensor;
    private java.awt.Label onLBL;
    private java.awt.Button startStopSensing;
    // End of variables declaration//GEN-END:variables

    private controllerveto.ControllerVeto controllerveto;

    public ManualDashboardFrame() {
        controllerveto = new ControllerVeto();
        moistureSensor = new MoistureSensor();

        initComponents();
        bind();

    }

    private void bind() {

        moistureSensor.addPropertyChangeListener(MoistureSensor.HUM_CHANNEL, (PropertyChangeEvent evt) -> {
            int humidity = (int) evt.getNewValue();
            //controller.setLocHumidity(humidity);
            humidityLBL.setText("" + humidity);
        });

        moistureSensor.addPropertyChangeListener(MoistureSensor.DECR_CHANNEL, (PropertyChangeEvent evt) -> {
            boolean dec = (boolean) evt.getNewValue();
            decreasingLBL.setText(dec ? "Decreasing" : "Not Decreasing");
        });

        controllerveto.addPropertyChangeListener(ControllerVeto.ON_CHANNEL, (PropertyChangeEvent evt) -> {
            boolean new_on = (boolean) evt.getNewValue();
            onLBL.setText(new_on ? "Active" : "Not Active");
            moistureSensor.setDecreasing(!new_on);
        });

        controllerveto.addVetoableChangelistener((PropertyChangeEvent evt) -> {
            boolean wantToTurnOn = (boolean) evt.getNewValue();
            if (wantToTurnOn) {
                if (controllerveto.getLocHumidity() > 60) {
                    throw new PropertyVetoException("Cannot turn on if humidity is more than 60%", evt);
                }
            } else {
                if (controllerveto.getLocHumidity() < 50) {
                    throw new PropertyVetoException("Cannot turn off if humidity is less than 50%", evt);
                }
            }
        });

    }

    private void manualIrrigationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manualIrrigationActionPerformed
        controllerveto.setOn(!controllerveto.isOn());
     }//GEN-LAST:event_manualIrrigationActionPerformed

    private void startStopSensingActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_startStopSensingActionPerformed
        onLBL.setText(controllerveto.isOn() ? "Active" : "Not Active");

        if (!moistureSensor.isStarted()) {
            moistureSensor.start();
            startStopSensing.setLabel("STOP");
        } else {
            moistureSensor.stop();
            startStopSensing.setLabel("START");
        }
    }// GEN-LAST:event_startStopSensingActionPerformed

    /**
     *
     * THE FOLLOWING CODE IS AUTOGENERATED
     *
     */
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        moistureSensor = new moisturesensor.MoistureSensor();
        humidityLBL = new java.awt.Label();
        onLBL = new java.awt.Label();
        decreasingLBL = new java.awt.Label();
        startStopSensing = new java.awt.Button();
        manualIrrigation = new java.awt.Button();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        humidityLBL.setText("Loading...");

        onLBL.setText("Loading...");

        decreasingLBL.setText("Loading...");

        startStopSensing.setLabel("Start");
        startStopSensing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startStopSensingActionPerformed(evt);
            }
        });

        manualIrrigation.setLabel("Manual Irrigation");
        manualIrrigation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manualIrrigationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(decreasingLBL, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addComponent(onLBL, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addComponent(humidityLBL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(manualIrrigation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(startStopSensing, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(128, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(humidityLBL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(decreasingLBL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(onLBL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(startStopSensing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(manualIrrigation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManualDashboardFrame.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManualDashboardFrame.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManualDashboardFrame.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManualDashboardFrame.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManualDashboardFrame().setVisible(true);
            }
        });
    }
}
